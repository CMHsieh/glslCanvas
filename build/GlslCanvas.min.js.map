{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","GlslCanvas.min.js","src/GlslCanvas.js","src/gl.js","src/tools.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_tools","_gl","GlslCanvas","canvas","this","gl","undefined","program","uniforms","vbo","isValid","setupWebGL","timeLoad","Date","now","fragContent","hasAttribute","getAttribute","source","fetchHTTP","vertexContent","load","texCoordsLoc","getAttribLocation","texCoords","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","verticesLoc","vertices","textures","bLoadTextures","imgList","split","nImg","loadTexture","setMouse","x","y","render","addEventListener","onResize","animated","tex","deleteTexture","att","attribs","deleteBuffer","useProgram","deleteProgram","fragString","vertString","vertexString","fragmentString","nTimes","match","nMouse","vertexShader","createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","deleteShader","change","name","url","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","image","Image","onload","glslCanvas","src","_len","arguments","Array","_key","setUniforms","parsed","parseUniforms","type","setTextureUniform","uniform","method","_len2","_key2","isDiff","location","getUniformLocation","apply","concat","texureIndex","activeTexture","TEXTURE0","width","height","mouse","rect","getBoundingClientRect","left","right","top","bottom","realToCSSPixels","window","devicePixelRatio","displayWidth","Math","floor","clientWidth","displayHeight","clientHeight","viewport","forceRender","isCanvasVisible","timeFrame","time","setUniform","drawArrays","TRIANGLES","./gl","./tools",2,"_toConsumableArray","arr","isArray","arr2","from","texture","pixelStorei","UNPACK_FLIP_Y_WEBGL","isPowerOf2","generateMipmap","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","makeFailHTML","msg","optAttribs","showLink","str","container","parentNode","innerHTML","WebGLRenderingContext","GET_A_WEBGL_BROWSER","context","create3DContext","OTHER_PROBLEM","getExtension","names","ii","getContext","shader","shaderSource","compileShader","compiled","getShaderParameter","COMPILE_STATUS","lastError","getShaderInfoLog","console","error","shaders","optLocations","attachShader","bindAttribLocation","linkProgram","linked","getProgramParameter","LINK_STATUS","getProgramInfoLog","log","prefix","_name","push",3,"innerHeight","document","documentElement","nextHighestPowerOfTwo","methood","request","XMLHttpRequest","response","onreadystatechange","readyState","status","responseText","open","overrideMimeType","send","FormatNumberLength","num","toString","getMousePos","evt","clientX","clientY","b"],"mappings":"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","file":"GlslCanvas.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",null,"/*\nThe MIT License (MIT)\n\nCopyright (c) 2015 Patricio Gonzalez Vivo ( http://www.patriciogonzalezvivo.com )\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the 'Software'), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nimport { fetchHTTP, isCanvasVisible, isDiff } from './tools';\nimport { setupWebGL, createShader, createProgram, parseUniforms, loadTexture } from './gl';\n\nexport default class GlslCanvas {\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.gl = undefined;\n        this.program = undefined;\n        this.uniforms = {};\n        this.vbo = {};\n        this.isValid = false;\n\n        // GL Context\n        let gl = setupWebGL(canvas);\n        if (!gl) {\n            return;\n        }\n        this.gl = gl;\n        this.timeLoad = Date.now();\n\n        // Load shader\n        let fragContent = '';\n        if (canvas.hasAttribute('data-fragment')) {\n            fragContent = canvas.getAttribute('data-fragment');\n        }\n        else if (canvas.hasAttribute('data-fragment-url')) {\n            let source = canvas.getAttribute('data-fragment-url');\n            fragContent = fetchHTTP(source);\n        }\n\n        // Load shader\n        let vertexContent = undefined;\n        if (canvas.hasAttribute('data-vertex')) {\n            vertexContent = canvas.getAttribute('data-vertex');\n        }\n        else if (canvas.hasAttribute('data-vertex-url')) {\n            let source = canvas.getAttribute('data-vertex-url');\n            vertexContent = fetchHTTP(source);\n        }\n\n        this.load(fragContent, vertexContent);\n\n        if (!this.program) {\n            return;\n        }\n\n        // Define Vertex buffer\n        let texCoordsLoc = gl.getAttribLocation(this.program, 'a_texcoord');\n        this.vbo.texCoords = gl.createBuffer();\n        this.gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo.texCoords);\n        this.gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0]), gl.STATIC_DRAW);\n        this.gl.enableVertexAttribArray(texCoordsLoc);\n        this.gl.vertexAttribPointer(texCoordsLoc, 2, gl.FLOAT, false, 0, 0);\n\n        let verticesLoc = gl.getAttribLocation(this.program, 'a_position');\n        this.vbo.vertices = gl.createBuffer();\n        this.gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo.vertices);\n        this.gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0]), gl.STATIC_DRAW);\n        this.gl.enableVertexAttribArray(verticesLoc);\n        this.gl.vertexAttribPointer(verticesLoc, 2, gl.FLOAT, false, 0, 0);\n\n        // load TEXTURES\n        this.textures = {};\n        let bLoadTextures = canvas.hasAttribute('data-textures');\n        if (bLoadTextures) {\n            let imgList = canvas.getAttribute('data-textures').split(',');\n            for (let nImg in imgList) {\n                this.loadTexture('u_tex' + nImg, imgList[nImg]);\n            }\n        }\n\n        this.setMouse({ x: 0, y: 0 });\n        this.render(true);\n\n        // Events\n        this.canvas.addEventListener('resize', this.onResize);\n    }\n\n    destroy() {\n        this.animated = false;\n        this.isValid = false;\n        for (let tex in this.textures) {\n            this.gl.deleteTexture(tex);\n        }\n        this.textures = {};\n        for (let att in this.attribs) {\n            this.gl.deleteBuffer(this.attribs[att]);\n        }\n        this.gl.useProgram(null);\n        this.gl.deleteProgram(this.program);\n        this.program = null;\n        this.gl = null;\n    }\n\n    load(fragString, vertString) {\n        // Load default vertex shader if no one is pass\n        if (!vertString) {\n            vertString = `\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nattribute vec2 a_position;\nattribute vec2 a_texcoord;\n\nvarying vec2 v_texcoord;\n\nvoid main() {\n    gl_Position = vec4(a_position, 0.0, 1.0);\n    v_texcoord = a_texcoord;\n}\n`;\n        }\n\n        // Load default fragment shader if no one is pass\n        if (!fragString) {\n            fragString = `\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nvarying vec2 v_texcoord;\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution;\n    gl_FragColor = vec4(st.x,st.y,abs(sin(u_time)),1.0);\n}\n`;\n        }\n\n        this.vertexString = vertString;\n        this.fragmentString = fragString;\n\n        this.animated = false;\n        let nTimes = (fragString.match(/u_time/g) || []).length;\n        let nMouse = (fragString.match(/u_mouse/g) || []).length;\n        this.animated = nTimes > 1 || nMouse > 1;\n\n        let vertexShader = createShader(this.gl, vertString, this.gl.VERTEX_SHADER);\n        let fragmentShader = createShader(this.gl, fragString, this.gl.FRAGMENT_SHADER);\n\n        // If Fragment shader fails load a empty one to sign the error\n        if (!fragmentShader) {\n            fragmentShader = createShader(this.gl, 'void main(){\\n\\tgl_FragColor = vec4(1.0);\\n}', this.gl.FRAGMENT_SHADER);\n            this.isValid = false;\n        }\n        else {\n            this.isValid = true;\n        }\n\n        // Create and use program\n        let program = createProgram(this.gl, [vertexShader, fragmentShader]);//, [0,1],['a_texcoord','a_position']);\n        this.gl.useProgram(program);\n\n        // Delete shaders\n        // this.gl.detachShader(program, vertexShader);\n        // this.gl.detachShader(program, fragmentShader);\n        this.gl.deleteShader(vertexShader);\n        this.gl.deleteShader(fragmentShader);\n\n        this.program = program;\n        this.change = true;\n\n        this.render(true);\n    }\n\n    loadTexture(name, url) {\n        let tex = this.gl.createTexture();\n\n        this.gl.bindTexture(this.gl.TEXTURE_2D, tex);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, new Uint8Array([255, 255, 0, 255])); // red\n\n        tex.image = new Image();\n        tex.image.onload = function(glslCanvas, tex) {\n            return function() {\n                loadTexture(glslCanvas.gl, tex);\n                glslCanvas.render(true);\n            };\n        }(this, tex);\n        tex.name = name;\n        tex.url = url;\n        tex.image.src = url;\n\n        this.textures[name] = tex;\n    }\n\n    refreshUniforms() {\n        this.uniforms = {};\n    }\n\n    setUniform(name, ...value) {\n        let u = {};\n        u[name] = value;\n        this.setUniforms(u);\n    }\n\n    setUniforms(uniforms) {\n        let parsed = parseUniforms(uniforms);\n        // Set each uniform\n        for (let u in parsed) {\n            if (parsed[u].type === 'sampler2D') {\n                // For textures, we need to track texture units, so we have a special setter\n                this.setTextureUniform(parsed[u].name, parsed[u].value[0]);\n            }\n            else {\n                this.uniform(parsed[u].method, parsed[u].type, parsed[u].name, parsed[u].value);\n            }\n        }\n    }\n\n\t// ex: program.uniform('3f', 'position', x, y, z);\n    uniform(method, type, name, ...value) { // 'value' is a method-appropriate arguments list\n        this.uniforms[name] = this.uniforms[name] || {};\n        let uniform = this.uniforms[name];\n        let change = isDiff(uniform.value, value);\n        if (change || this.change || uniform.location === undefined || uniform.value === undefined) {\n            uniform.name = name;\n            uniform.value = value;\n            uniform.type = type;\n            uniform.method = 'uniform' + method;\n            uniform.location = this.gl.getUniformLocation(this.program, name);\n\n            this.gl[uniform.method].apply(this.gl, [uniform.location].concat(uniform.value));\n        }\n    }\n\n    setTextureUniform(name, url) {\n        if (this.textures[name] === undefined) {\n            this.loadTexture(name, url);\n        }\n        else {\n            this.uniform('1i', 'sampler2D', name, this.texureIndex);\n            this.gl.activeTexture(this.gl.TEXTURE0 + this.texureIndex);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.textures[name]);\n            this.uniform('2f', 'vec2', name + 'Resolution', this.textures[name].image.width, this.textures[name].image.height);\n            this.texureIndex++;\n        }\n    }\n\n    setMouse(mouse) {\n        // set the mouse uniform\n        let rect = this.canvas.getBoundingClientRect();\n        if (mouse &&\n            mouse.x && mouse.x >= rect.left && mouse.x <= rect.right &&\n            mouse.y && mouse.y >= rect.top && mouse.y <= rect.bottom) {\n            this.uniform('2f', 'vec2', 'u_mouse', mouse.x - rect.left, this.canvas.height - (mouse.y - rect.top));\n        }\n    }\n\n    onResize() {\n        let realToCSSPixels = window.devicePixelRatio || 1;\n\n        // Lookup the size the browser is displaying the canvas in CSS pixels\n        // and compute a size needed to make our drawingbuffer match it in\n        // device pixels.\n        let displayWidth = Math.floor(this.gl.canvas.clientWidth * realToCSSPixels);\n        let displayHeight = Math.floor(this.gl.canvas.clientHeight * realToCSSPixels);\n\n        // Check if the canvas is not the same size.\n        if (this.gl.canvas.width !== displayWidth ||\n            this.gl.canvas.height !== displayHeight) {\n            // Make the canvas the same size\n            this.gl.canvas.width = displayWidth;\n            this.gl.canvas.height = displayHeight;\n            // Set the viewport to match\n            this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        }\n    }\n\n    render(forceRender) {\n        if ((forceRender !== undefined && forceRender) ||\n            (this.animated && isCanvasVisible(this.canvas))) {\n            // set the time uniform\n            let timeFrame = Date.now();\n            let time = (timeFrame - this.timeLoad) / 1000.0;\n            this.uniform('1f', 'float', 'u_time', time);\n\n            // set the resolution uniform\n            this.uniform('2f', 'vec2', 'u_resolution', this.canvas.width, this.canvas.height);\n\n            this.texureIndex = 0;\n            for (let tex in this.textures) {\n                this.setUniform(tex, this.textures[tex].url);\n            }\n\n            // Draw the rectangle.\n            this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);\n\n            this.change = false;\n        }\n    }\n\n    version() {\n        return '0.0.1';\n    }\n}\n\nwindow.GlslCanvas = GlslCanvas;\n","import { isPowerOf2 } from './tools';\n\nlet lastError = '';\n\nexport function loadTexture(gl, texture) {\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.image);\n    if (isPowerOf2(texture.image.width) && isPowerOf2(texture.image.height)) {\n        gl.generateMipmap(gl.TEXTURE_2D);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n    }\n    else {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    }\n    gl.bindTexture(gl.TEXTURE_2D, null);\n}\n\n/**\n * Creates the HTLM for a failure message\n * @param {string} canvasContainerId id of container of th\n *        canvas.\n * @return {string} The html.\n */\nfunction makeFailHTML(msg) {\n    return `\n<table style=\"background-color: #8CE; width: 100%; height: 100%;\"><tr>\n<td align=\"center\">\n<div style=\"display: table-cell; vertical-align: middle;\">\n<div style=\"\">` + msg + `</div>\n</div>\n</td></tr></table>\n`;\n}\n\n/**\n * Mesasge for getting a webgl browser\n * @type {string}\n */\nlet GET_A_WEBGL_BROWSER = `\n\tThis page requires a browser that supports WebGL.<br/>\n\t<a href=\"http://get.webgl.org\">Click here to upgrade your browser.</a>\n`;\n\n/**\n * Mesasge for need better hardware\n * @type {string}\n */\nlet OTHER_PROBLEM = `\n\tIt does not appear your computer can support WebGL.<br/>\n\t<a href=\"http://get.webgl.org/troubleshooting/\">Click here for more information.</a>\n`;\n\n/**\n * Creates a webgl context. If creation fails it will\n * change the contents of the container of the <canvas>\n * tag to an error message with the correct links for WebGL.\n * @param {Element} canvas. The canvas element to create a\n *     context from.\n * @param {WebGLContextCreationAttirbutes} optAttribs Any\n *     creation attributes you want to pass in.\n * @return {WebGLRenderingContext} The created context.\n */\nexport function setupWebGL (canvas, optAttribs) {\n    function showLink(str) {\n        let container = canvas.parentNode;\n        if (container) {\n            container.innerHTML = makeFailHTML(str);\n        }\n    }\n\n    if (!window.WebGLRenderingContext) {\n        showLink(GET_A_WEBGL_BROWSER);\n        return null;\n    }\n\n    let context = create3DContext(canvas, optAttribs);\n    if (!context) {\n        showLink(OTHER_PROBLEM);\n    }\n    context.getExtension('OES_standard_derivatives');\n    return context;\n}\n\n/**\n * Creates a webgl context.\n * @param {!Canvas} canvas The canvas tag to get context\n *     from. If one is not passed in one will be created.\n * @return {!WebGLContext} The created context.\n */\nexport function create3DContext(canvas, optAttribs) {\n    let names = ['webgl', 'experimental-webgl'];\n    let context = null;\n    for (var ii = 0; ii < names.length; ++ii) {\n        try {\n            context = canvas.getContext(names[ii], optAttribs);\n        } catch(e) {\n            if (context) {\n                break;\n            }\n        }\n    }\n    return context;\n}\n\n/*\n *\tCreate a Vertex of a specific type (gl.VERTEX_SHADER/)\n */\nexport function createShader(gl, source, type) {\n    let shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    let compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n    if (!compiled) {\n        // Something went wrong during compilation; get the error\n        lastError = gl.getShaderInfoLog(shader);\n        console.error('*** Error compiling shader ' + shader + ':' + lastError);\n        gl.deleteShader(shader);\n        return null;\n    }\n\n    return shader;\n}\n\n/**\n * Loads a shader.\n * @param {!WebGLContext} gl The WebGLContext to use.\n * @param {string} shaderSource The shader source.\n * @param {number} shaderType The type of shader.\n * @param {function(string): void) opt_errorCallback callback for errors.\n * @return {!WebGLShader} The created shader.\n */\nexport function createProgram(gl, shaders, optAttribs, optLocations) {\n    let program = gl.createProgram();\n    for (let ii = 0; ii < shaders.length; ++ii) {\n        gl.attachShader(program, shaders[ii]);\n    }\n    if (optAttribs) {\n        for (let ii = 0; ii < optAttribs.length; ++ii) {\n            gl.bindAttribLocation(\n            program,\n            optLocations ? optLocations[ii] : ii,\n            optAttribs[ii]);\n        }\n    }\n    gl.linkProgram(program);\n\n    // Check the link status\n    let linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (!linked) {\n        // something went wrong with the link\n        lastError = gl.getProgramInfoLog(program);\n        console.log('Error in program linking:' + lastError);\n\n        gl.deleteProgram(program);\n        return null;\n    }\n    return program;\n}\n\n// By Brett Camber on\n// https://github.com/tangrams/tangram/blob/master/src/gl/glsl.js\nexport function parseUniforms(uniforms, prefix = null) {\n    let parsed = [];\n\n    for (let name in uniforms) {\n        let uniform = uniforms[name];\n        let u;\n\n        if (prefix) {\n            name = prefix + '.' + name;\n        }\n\n        // Single float\n        if (typeof uniform === 'number') {\n            parsed.push({\n                type: 'float',\n                method: '1f',\n                name, value:\n                uniform\n            });\n        }\n        // Array: vector, array of floats, array of textures, or array of structs\n        else if (Array.isArray(uniform)) {\n            // Numeric values\n            if (typeof uniform[0] === 'number') {\n                // float vectors (vec2, vec3, vec4)\n                if (uniform.length >= 2 && uniform.length <= 4) {\n                    parsed.push({\n                        type: 'vec' + uniform.length,\n                        method: uniform.length + 'fv',\n                        name,\n                        value: uniform\n                    });\n                }\n                // float array\n                else if (uniform.length > 4) {\n                    parsed.push({\n                        type: 'float[]',\n                        method: '1fv',\n                        name: name + '[0]',\n                        value: uniform\n                    });\n                }\n                // TODO: assume matrix for (typeof == Float32Array && length == 16)?\n            }\n            // Array of textures\n            else if (typeof uniform[0] === 'string') {\n                parsed.push({\n                    type: 'sampler2D',\n                    method: '1i',\n                    name: name,\n                    value: uniform\n                });\n            }\n            // Array of arrays - but only arrays of vectors are allowed in this case\n            else if (Array.isArray(uniform[0]) && typeof uniform[0][0] === 'number') {\n                // float vectors (vec2, vec3, vec4)\n                if (uniform[0].length >= 2 && uniform[0].length <= 4) {\n                    // Set each vector in the array\n                    for (u = 0; u < uniform.length; u++) {\n                        parsed.push({\n                            type: 'vec' + uniform[0].length,\n                            method: uniform[u].length + 'fv',\n                            name: name + '[' + u + ']',\n                            value: uniform[u]\n                        });\n                    }\n                }\n                // else error?\n            }\n            // Array of structures\n            else if (typeof uniform[0] === 'object') {\n                for (u = 0; u < uniform.length; u++) {\n                    // Set each struct in the array\n                    parsed.push(...parseUniforms(uniform[u], name + '[' + u + ']'));\n                }\n            }\n        }\n        // Boolean\n        else if (typeof uniform === 'boolean') {\n            parsed.push({\n                type: 'bool',\n                method: '1i',\n                name,\n                value: uniform\n            });\n        }\n        // Texture\n        else if (typeof uniform === 'string') {\n            parsed.push({\n                type: 'sampler2D',\n                method: '1i',\n                name,\n                value: uniform\n            });\n        }\n        // Structure\n        else if (typeof uniform === 'object') {\n            // Set each field in the struct\n            parsed.push(...parseUniforms(uniform, name));\n        }\n        // TODO: support other non-float types? (int, etc.)\n    }\n    return parsed;\n}\n","export function isCanvasVisible(canvas) {\n    return\t((canvas.getBoundingClientRect().top + canvas.height) > 0) &&\n        (canvas.getBoundingClientRect().top < (window.innerHeight || document.documentElement.clientHeight));\n}\n\nexport function isPowerOf2(value) {\n    return (value & (value - 1)) === 0;\n}\n\nexport function nextHighestPowerOfTwo(x) {\n    --x;\n    for (let i = 1; i < 32; i <<= 1) {\n        x = x | x >> i;\n    }\n    return x + 1;\n}\n\nexport function fetchHTTP(url, methood) {\n    let request = new XMLHttpRequest(),\n        response;\n\n    request.onreadystatechange = function () {\n        if (request.readyState === 4 && request.status === 200) {\n            response = request.responseText;\n        }\n    };\n    request.open(methood ? methood : 'GET', url, false);\n    request.overrideMimeType('text/plain');\n    request.send();\n    return response;\n}\n\nexport function FormatNumberLength(num, length) {\n    let r = num.toString();\n    while (r.length < length) {\n        r = '0' + r;\n    }\n    return r;\n}\n\nexport function getMousePos(canvas, evt) {\n    let rect = canvas.getBoundingClientRect();\n    return {\n        x: evt.clientX - rect.left,\n        y: evt.clientY - rect.top\n    };\n}\n\nexport function isDiff(a, b) {\n    if (a && b) {\n        return a.toString() !== b.toString();\n    }\n    return false;\n}\n"],"sourceRoot":"/source/"}